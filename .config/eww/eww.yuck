(defwidget barSpacer []
  (label
    :class "barModule spacer"
    :text ""
  )
)

(defpoll distroLogo :interval "12h" "scripts/distroLogo")

(defwidget barDistroLogo []
  (label :text distroLogo)
)

(defpoll clockTime :interval "1s" "date +'%I:%M:%S %p'")
(defpoll clockDate :interval "1s" "date +'%B %d, %Y'")
(defvar timeRev false)

(defwidget barClockModule []
  (eventbox
    :onhover "eww update timeRev=true"
    :onhoverlost "eww update timeRev=false"
    (box
      :class "barModule clock"
      :space-evenly false
      :spacing 9
      (label :text "󰥔")
      (label :text clockTime)
      (revealer
        :transition "slideRight"
        :duration "350ms"
        :reveal timeRev
        (label :text clockDate)
      )
    )
  )
)

(defpoll batteryPercent :interval "1s" "scripts/battery getPercent")
(defpoll batteryIcon :interval "1s" "scripts/battery getIcon")
(defvar batteryRev false)

(defwidget barBatteryModule []
  (eventbox
    :onhover "eww update batteryRev=true"
    :onhoverlost "eww update batteryRev=false"
    (box 
      :class "barModule battery ${batteryPercent <= 20 ? "warning" : ""} ${batteryPercent <= 10 ? "critical" : ""}"
      :space-evenly false
      :spacing 7
      (label :text batteryIcon)
      (revealer
        :transition "slideRight"
        :duration "350ms"
        :reveal batteryRev
        (label :text "${batteryPercent}%")
      )
    )
  )
)

(defpoll networkSsid :interval "1s" "scripts/network getType")
(defpoll networkIcon :interval "1s" "scripts/network getIcon")
(defvar networkRev false)

(defwidget barNetworkModule []
  (eventbox
    :onhover "eww update networkRev=true"
    :onhoverlost "eww update networkRev=false"
    (box :class "barModule network"
      :space-evenly false
      :spacing 9
      (label :text networkIcon)
      (revealer
        :transition "slideRight"
        :duration "350ms"
        :reveal networkRev
        (label :text networkSsid)
      )
    )
  )
)

(defpoll volumePercent :interval "100ms" "scripts/media getVolume")
(defpoll volumeIcon :interval "100ms" "scripts/media getIcon")
(defvar volumeRev false)

(defwidget barVolumeModule []
  (eventbox
    :onhover "eww update volumeRev=true"
    :onhoverlost "eww update volumeRev=false"
    (box :class "barModule volume"
      :space-evenly false
      :spacing 9
      (label :text volumeIcon)
      (revealer
        :transition "slideright"
        :duration "350ms"
        :reveal volumeRev
        (scale
          :width 105
          :max 101
          :min 0
          :value volumePercent
          :onchange "scripts/media postVolume {}")
      )
    )
  )
)

(defpoll activeWindow :interval "50ms" "scripts/windowmanager getActiveWindow")

(defwidget barWindowNameModule []
  (label
    :class "barModule windowName"
    :text {activeWindow.title}
  )
)

(defpoll activeWorkspace :interval "50ms" "scripts/windowmanager getActiveWorkspace")
(defpoll workspaces :interval "50ms" "scripts/windowmanager getWorkspaces")

(defwidget barWorkspaceModule []
  (eventbox
    (box
      :class "barModule workspace"
      :space-evenly false
      :spacing 5
      (label :text "${workspaces}${activeWorkspace}" :visible false)
      (for workspace in workspaces
        (button
          :class "barModule workspace workspaceEntry ${workspace.id == activeWorkspace.id ? "active" : ""}"
          :onclick "scripts/windowmanager postWorkspace ${workspace.id}"
          {workspace.id}
        )
      )
    )
  )
)


(defwidget statusbarLeft []
  (box
    :orientation "h"
    :space-evenly false
    :halign "start"
    :spacing 15
    (barDistroLogo)
    (barWorkspaceModule)
    (barSpacer)
    (barWindowNameModule)
  )
)

(defwidget statusbarCenter []
  (box
    :orientation "h"
    :space-evenly false
    :halign "center"
    :spacing 15
  )
)

(defwidget statusbarRight []
  (box
    :orientation "h"
    :space-evenly false
    :halign "end"
    :spacing 15
    (barVolumeModule)
    (barBatteryModule)
    (barNetworkModule)
    (barClockModule)
  )
)

(defwidget statusbarLayout []
  (box
    :class "statusBar"
    :orientation "h"
    (statusbarLeft)
    (statusbarCenter)
    (statusbarRight)
  )
)

(defwindow statusbar
  :geometry (geometry
    :x "0px"
    :y "0px"
    :width "100%"
    :height "36px"
    :anchor "top center"
  )
  :monitor 0
  :stacking "fg"
  :exclusive true
  (statusbarLayout)
)
